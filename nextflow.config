//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.

params {
    help              = false
    fastq             = null
    alignments        = null
    outdir            = 'output'
    wfversion         = 'v0.1.1'
    genome            = null
    restore_hardclips = true

    // Output config
    publish_dir_mode = 'copy'

    // Base specifications
    // Defaults only, expecting to be overwritten
    cpus = 4
    max_cpus = 4
    max_memory = 6.GB
    max_time = 240.h
    single_cpu_mem = 6.GB
    enable_conda = false
}


// Load genome included in github repository
includeConfig 'conf/genomes.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        params.enable_conda    = true
        conda.useMicromamba    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test      { includeConfig 'conf/test.config'      }
    test_19   { includeConfig 'conf/test-hg19.config' }
    ci   { includeConfig 'conf/ci-test.config'   }
}


executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

timeline {
    enabled = true
    file = "${params.outdir}/workspace/execution/timeline.html"
}
report {
    enabled = true
    file = "${params.outdir}/workspace/execution/report.html"
}
trace {
    enabled = true
    file = "${params.outdir}/workspace/execution/trace.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/workspace/execution/pipeline.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


trace {
    enabled = true
    overwrite = true
}
report {
    enabled = true
    overwrite = true
}